#!/usr/bin/env python

import sys
#import json
#import tempfile
import datetime

def extract_start(json):
    try:
        # Also convert to int since update_time will be string.  When comparing
        # strings, "10" is smaller than "2".
        return float(json['start'])
    except KeyError:
        return 0.0

class TypeTracker:
    'Tracks a type of data'

    def __init__(self, name):
        self.reset()
        self.name = name

    def __str__(self):
        return "tracker_" + self.name

    def add(self, data):
        self.count += 1
        self.sum += data
        if data < self.min:
            self.min = data
        if data > self.max:
            self.max = data

    def reset(self):
        self.count = 0
        self.sum = 0
        self.min = float('inf')
        self.max = 0

    def get_min(self):
        if self.count > 0:
            return self.min
        else:
            return 0

    def mean(self):
        if self.count > 0:
            return self.sum / self.count
        else:
            return 0


if len(sys.argv) < 2:
    print >> sys.stderr, 'expecting at least one argument for file to process'
    sys.exit(1)

infile = sys.argv[1]
if infile[-4:] != '.log':
    print >> sys.stderr, infile, \
        'does not appear to be an OSD log file; does not end in \'.log\''
    sys.exit(1)

outfile = infile.replace('.log', '.csv')

clump=1.0
if len(sys.argv) >= 3:
    if sys.argv[2].find('.') >= 0:
        clump = float(sys.argv[2])
    else:
        clump = int(sys.argv[2])
print "clumping in %s-second intervals" % (str(clump))

filter = 0
if len(sys.argv) >= 4:
    filter = int(sys.argv[3])
if filter > 0:
    print "filtering entries before %d seconds" % (filter)


count = 0
op_code = 0
recover_code = 1
counters = dict()

counters[op_code] = 0
counters[recover_code] = 0

with open(outfile, 'w') as out:
    out.write("%s,%s,%s\n" %
              ('start', 'dequeue_op', 'do_recovery'))
    with open(infile) as ins:
        for line in ins:
            timestamp = datetime.datetime.strptime(line[:26],
                                                   "%Y-%m-%d %H:%M:%S.%f")

            if count == 0:
                basetime = timestamp
                cursor = 0
            count += 1

            seconds = (timestamp - basetime).total_seconds()
            while seconds > cursor + clump:
                if cursor >= filter:
                    out.write("%d,%d,%d\n" %
                              (cursor - filter,
                               counters[op_code],
                               counters[recover_code]))
                counters[op_code] = 0
                counters[recover_code] = 0
                cursor += clump
                
            if line.find('dequeue_op') >= 0:
                counters[op_code] += 1
            elif line.find('do_recovery') >= 0:
                counters[recover_code] += 1

    out.write("%d,%d,%d\n" %
              (cursor - filter, counters[op_code], counters[recover_code]))

print count, "records processed;", cursor - filter, "seconds of data produced"
